Here, you find a manual how to get started with the new function wiener_full_lpdf on Windows, Linux and Mac.

In case of any question feel free to contact the authors Franziska Henrich (franziska.henrich@psychologie.uni-freiburg.de) or Valentin Pratz (pratz@stud.uni-heidelberg.de)

The easiest way to use the function is via cmdstan. You can call cmdstan via cmdstanr in R or cmdstanpy in python.

You need to follow these steps: 

1) Download the cmdstan-ddm-7pm.zip folder from [1] and unpack everything.

Windows
W2) Install all required dependencies [2]. 
W3) Add the following to cmdstan-ddm-7pm/make/local (to use RTools42 with cmdstan). Type in the command line/ a terminal: 
	$ cd cmdstan-ddm-7pm
	$ vim make/local
	press i (for insert), type the following two lines:
		CXXFLAGS += -Wno-nonnull
 		TBB_CXXFLAGS= -U__MSVCRT_VERSION__ -D__MSVCRT_VERSION__=0x0E00
	press Esc, and :x Enter (to save and exit)
W4) build cmdstan in the cmdstan-ddm-7pm folder:
	$ mingw32-make build
W5) Add the path to tbb to your PATH-variable by typing
	$ mingw32-make install-tbb
W6) Close the shell and use a new shell to test installation (you may restart your PC)
	create .exe: 			$ mingw32-make examples/bernoulli/bernoulli.exe 
	test whether this worked:	$ ./examples/bernoulli/bernoulli.exe sample data file=examples/bernoulli/bernoulli.data.json 
	summarize parameter estimates:	$ bin/stansummary.exe output.csv 



Linux
L2) Install all required dependencies [2]. Then type
	$ cd cmdstan-ddm-7pm
	$ make build
L3) To test whether everything works, create a .stan model file in cmdstan/stan/lib/stan_math/models (or use the example models provided in the folder) 
   and compile the model (!!without .stan-extension!!, see [4]):
	$ cd cmdstan-ddm-7pm
	$ make stan/lib/stan_math/models/wiener_full_lpdf STANC3=path/to/stanc3-folder

L4a) To open the documentation install doxygen [3]. Then make the documentation:
	$ cd cmdstan-ddm-7pm/stan/lib/stan_math
	$ make doxygen
L4b) A new folder in stan_math will be created. Double click on: doc/api/html/index.html. 
    Then a webpage opens. On the left handside, navigate to "Internal Docs". Click on "Probability Distributions". 
    Then, on the right hand side, the content of "Probability Distributions" opens. Scroll down to "wiener_full_lpdf".



Mac
M2) Follow the instructions on [2].



Example R-Code for cmdstanr. 
data.rds of the form: condition|resonse|reaction_time
	library(cmdstanr)
	library(readr)
	set_cmdstan_path("path/to/cmdstan-ddm-7pm-folder")
	file <- file.path("stan/wiener_full_lpdf.stan")
	mod <- cmdstan_model(file)
	init.full = function(chains=4, N=200){
	  L = list()
	  for (i in 1:chains) {
	    L[[i]] = list(
	      a = 1,
	      zr_m = 0.5,
	      v_m = c(0,0),
	      t0_m = 0.1,
	      zr_s = 0.1,
	      v_s = 0.2,
	      t0_s = 0.1
	    )
	  }
	  return (L)
	}

	sim.data = readRDS("path/to/data.rds")
	stan.data = list(
	  N = nrow(sim.data),     # Number of Trials
	  cnd = sim.data$cnd,     # stimulus type (1,2)
	  Ncnds = length(unique(sim.data$cnd)), # Number of conditions
	  rt = sim.data$rt,       # Rt in seconds!
	  resp = sim.data$resp,    # response (0=lower threshold, 1=upper threshold)
	  precision = 1e-3,
	  parallel = 0
	)
	fit <- mod$sample(
	  data = stan.data,
	  seed = 123,
	  chains = 4,
	  parallel_chains = 4,
	  refresh = 10,
	  iter_warmup = 200,
	  iter_sampling = 300,
	  init = init.full()
	)

[1] https://github.com/Franzi2114/math_HOW-TO-USE
[2] https://mc-stan.org/docs/2_29/cmdstan-guide/cmdstan-installation.html
[3] https://doxygen.nl/manual/install.html
[4] https://github.com/stan-dev/cmdstan/wiki/Getting-Started-with-CmdStan


